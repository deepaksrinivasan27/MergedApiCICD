type Author {
    id: ID!
    reviews: ReviewConnection
}

type Book {
    id: ID!
    reviews: ReviewConnection
}

input CreateReviewInput {
    bookId: ID!
    reviewerId: ID!
    authorId: ID!
    comment: String!
    rating: Int!
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
}

input DeleteReviewInput {
    id: ID!
}

type Review {
    id: ID!
    bookId: ID!
    @hidden
    reviewerId: ID!
    @hidden
    authorId: ID!
    @hidden
    comment: String!
    rating: Int!
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
}

type ReviewConnection {
    items: [Review]
    nextToken: String
}

input TableBooleanFilterInput {
    ne: Boolean
    eq: Boolean
}

input TableFloatFilterInput {
    ne: Float
    eq: Float
    le: Float
    lt: Float
    ge: Float
    gt: Float
    contains: Float
    notContains: Float
    between: [Float]
}

input TableIDFilterInput {
    ne: ID
    eq: ID
    le: ID
    lt: ID
    ge: ID
    gt: ID
    contains: ID
    notContains: ID
    between: [ID]
    beginsWith: ID
}

input TableIntFilterInput {
    ne: Int
    eq: Int
    le: Int
    lt: Int
    ge: Int
    gt: Int
    contains: Int
    notContains: Int
    between: [Int]
}

input TableReviewFilterInput {
    id: TableIDFilterInput
    bookId: TableIDFilterInput
    reviewerId: TableIDFilterInput
    authorId: TableIDFilterInput
    comment: TableStringFilterInput
    createdAt: TableStringFilterInput
    updatedAt: TableStringFilterInput
}

input TableStringFilterInput {
    ne: String
    eq: String
    le: String
    lt: String
    ge: String
    gt: String
    contains: String
    notContains: String
    between: [String]
    beginsWith: String
}

input UpdateReviewInput {
    id: ID!
    bookId: ID
    reviewerId: ID
    authorId: ID
    comment: String
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
}

type Mutation {
    createReview(input: CreateReviewInput!): Review
    updateReview(input: UpdateReviewInput!): Review
    deleteReview(input: DeleteReviewInput!): Review
}

type Query {
    getReview(id: ID!): Review
    listReviews(filter: TableReviewFilterInput, limit: Int, nextToken: String): ReviewConnection
    queryReviewsByBookIndex(bookId: ID!, first: Int, after: String): ReviewConnection
    queryReviewsByReviewerIndex(reviewerId: ID!, first: Int, after: String): ReviewConnection
    queryReviewsByBookAuthorIndex(authorId: ID!, first: Int, after: String): ReviewConnection
}

type Subscription {
    onCreateReview(
        id: ID,
        bookId: ID,
        reviewerId: ID,
        authorId: ID,
        comment: String
    ): Review
    @aws_subscribe(mutations: ["createReview"])
    onUpdateReview(
        id: ID,
        bookId: ID,
        reviewerId: ID,
        authorId: ID,
        comment: String
    ): Review
    @aws_subscribe(mutations: ["updateReview"])
    onDeleteReview(
        id: ID,
        bookId: ID,
        reviewerId: ID,
        authorId: ID,
        comment: String
    ): Review
    @aws_subscribe(mutations: ["deleteReview"])
}